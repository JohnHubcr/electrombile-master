package com.zenchn.electrombile.service;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.IBinder;
import android.os.Message;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Toast;

import com.zenchn.electrombile.interactor.AppUpdateInteractor;
import com.zenchn.electrombile.interactor.impl.AppUpdateInteractorImpl;
import com.zenchn.electrombile.R;
import com.zenchn.electrombile.base.ApplicationManager;
import com.zenchn.electrombile.base.CommonDialog;
import com.zenchn.electrombile.base.Constants;
import com.zenchn.electrombile.entity.AppStoreInfo;
import com.zenchn.electrombile.utils.CommonUtil;
import com.zenchn.electrombile.utils.FileUtils;
import com.zenchn.electrombile.utils.MD5;
import com.zenchn.electrombile.utils.ToastUtil;
import com.zenchn.electrombile.widget.NumberProgressbar.NumberProgressBar;

import java.io.File;

/**
 * Created by wangr on 2016/11/21.
 */
public class UpdateService extends BaseService implements AppUpdateInteractor.OnFinishedListener {


    private AppUpdateInteractor interactor;

    /* 更新进度条 */
    private NumberProgressBar mProgress;

    /* 下载保存路径 */
    private String destFileDir = Constants.appFolder + File.separator + Constants.FILE_DIR_DOWNLOAD + File.separator + Constants.FILE_DIR_APK;
    private String destFileName = "electrombile_update.apk";

    private AppStoreInfo appStoreInfo;

    public UpdateService() {
        this.interactor = new AppUpdateInteractorImpl();
    }

    @Override
    protected void handler(Message msg) {
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (intent != null) {
            final String sessionId = intent.getStringExtra("sessionId");
            handler.post(new Runnable() {
                @Override
                public void run() {
                    interactor.getNewAppInfo(sessionId, UpdateService.this);
                }
            });
        }
        return super.onStartCommand(intent, flags, startId);
    }

    @Override
    public void onSuccess(AppStoreInfo appStoreInfo) {
        checkVersion(appStoreInfo);// 判断版本
    }

    /**
     * 检查版本信息
     *
     * @param appStoreInfo
     */
    private void checkVersion(AppStoreInfo appStoreInfo) {
        this.appStoreInfo = appStoreInfo;
        // 版本判断
        if (appStoreInfo != null) {
            String versionCode = this.getString(R.string.app_version);
            int oldVersion = Integer.parseInt(versionCode.replace(".", ""));
            int newVersion = Integer.parseInt(appStoreInfo.getVerCode().replace(".", ""));
            if (oldVersion < newVersion) {
                showRemindDialog(getString(R.string.update_new_app), appStoreInfo);
            } else {
                stopService(new Intent(this, UpdateService.class));
            }
        }
    }

    /**
     * 是否强制更新
     */
    private void askIsMustUpdate() {
        if (appStoreInfo != null) {
            Boolean isMust = appStoreInfo.getIsMust();
            if (isMust) {
                ApplicationManager.getInstance().quitApp();
            } else {
                showResMessage(R.string.update_fail);
            }
        }
    }

    /**
     * 提示框
     *
     * @param title
     * @param appStoreInfo
     */
    public void showRemindDialog(String title, final AppStoreInfo appStoreInfo) {
        Activity topActivity = ApplicationManager.getInstance().getTopActivity();
        CommonDialog.Builder builder = new CommonDialog.Builder(topActivity);
        if (appStoreInfo != null)
            builder.setMessage(CommonUtil.isEmpty(appStoreInfo.getUpdateInfo()) ? getString(R.string.update_new_app_default_desc) : appStoreInfo.getUpdateInfo());

        builder.setTitle(CommonUtil.isEmpty(title) ? "提示" : title);
        builder.setCancelable(false);
        builder.setCanceledOnTouchOutside(false);
        builder.setPositiveButton("更新", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                checkLocalFileMd5(appStoreInfo.getFileMd5());
            }

        });

        builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                if (dialog != null) {
                    dialog.dismiss();
                    askIsMustUpdate();
                }
            }
        });
        builder.create().show();
    }

    /**
     * 检查本地是否有缓存apk
     *
     * @param onlineApkMd5
     */
    private void checkLocalFileMd5(String onlineApkMd5) {
        File file = new File(destFileDir, destFileName);
        if (file != null && file.exists()) {
            String md5ByFile = MD5.getMd5ByFile(file);
            if (onlineApkMd5.equalsIgnoreCase(md5ByFile)) {
                installApk(file);
            } else {
                clearOldUpdateApk();
                interactor.updateApp(destFileDir, destFileName, appStoreInfo.getVerDownloadLink(), this);
                showDownloadDialog();
            }
        } else {
            clearOldUpdateApk();
            interactor.updateApp(destFileDir, destFileName, appStoreInfo.getVerDownloadLink(), this);
            showDownloadDialog();
        }
    }

    /**
     * 清除旧的更新包
     */
    private void clearOldUpdateApk() {
        File file = new File(destFileDir, destFileName);
        if (file != null && file.exists()) {
            FileUtils.deleteFolder(file.getAbsolutePath());
        }
    }

    /**
     * 安装APK文件
     */
    private void installApk(File apkfile) {

        if (!apkfile.exists() || !apkfile.isFile()) {
            return;
        }
        String apkName = apkfile.getName();
        String fileType = apkName.substring(apkName.lastIndexOf(".") + 1);
        if ("apk".equals(fileType)) {
            installApp(apkfile);
        } else {
            showResMessage(R.string.update_apk_breakdown);
            askIsMustUpdate();
        }

    }

    /**
     * toast消息
     *
     * @param msg
     */
    private void showMessage(String msg) {
        ToastUtil.showDefaultMessage(getApplicationContext(), msg);
    }

    /**
     * toast消息
     *
     * @param resId
     */
    private void showResMessage(int resId) {
        showMessage(getApplication().getString(resId));
    }

    /**
     * 显示软件下载对话框
     */
    private void showDownloadDialog() {
        // 构造软件下载对话框
        Activity topActivity = ApplicationManager.getInstance().getTopActivity();
        CommonDialog.Builder builder = new CommonDialog.Builder(topActivity);
        builder.setTitle("正在更新");
        builder.setCancelable(false);

        // 给下载对话框增加进度条
        final LayoutInflater inflater = LayoutInflater.from(topActivity);
        View view = inflater.inflate(R.layout.app_update_progress, null);
        mProgress = (NumberProgressBar) view.findViewById(R.id.update_progress);
        mProgress.setMax(100);
        builder.setContentView(view);

        builder.setPositiveButton("后台更新", new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {
                Toast.makeText(UpdateService.this, getString(R.string.update_background), Toast.LENGTH_SHORT).show();
                dialog.dismiss();
            }
        });
        // 取消更新
        builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                interactor.cancelDownTask(this);
                // 设置取消状态
                askIsMustUpdate();
            }
        });
        builder.create().show();
    }

    @Override
    public void onDownloadSuccess(File file) {
        installApk(file);
    }

    @Override
    public void inProgress(float progress) {
        mProgress.setProgress((int) (progress * 100));
    }

    @Override
    public void onError() {
        askIsMustUpdate();
    }

    @Override
    public void onResponseError(String msg) {
        askIsMustUpdate();
    }

    /**
     * 安装一个apk文件
     */
    public void installApp(File uriFile) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setDataAndType(Uri.fromFile(uriFile), "application/vnd.android.package-archive");
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
    }
}
