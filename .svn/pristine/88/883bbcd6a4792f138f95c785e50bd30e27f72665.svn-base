package com.zenchn.electrombile.wrapper;

import com.zenchn.electrombile.wrapper.callback.ProgressRequestCallback;
import com.zenchn.electrombile.wrapper.callback.ProgressResponseCallback;

import java.io.IOException;

import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * 作    者：wangr on 2017/3/15 17:06
 * 描    述：
 * 修订记录：
 */
public class OkHttpClientWrapper {

    /**
     * 包装OkHttpClient，用于下载文件的回调
     *
     * @param callback 进度回调接口
     * @return 包装后的OkHttpClient
     */
    public static OkHttpClient addProgressResponseCallback(final ProgressResponseCallback callback) {

        OkHttpClient.Builder client = new OkHttpClient.Builder();
        //增加拦截器
        client.addInterceptor(new Interceptor() {
            @Override
            public Response intercept(Chain chain) throws IOException {
                //拦截
                Response originalResponse = chain.proceed(chain.request());

                //包装响应体并返回
                return originalResponse.newBuilder()
                        .body(new ProgressResponseBody(originalResponse.body(), callback))
                        .build();
            }
        });
        return client.build();
    }


    /**
     * 包装OkHttpClient，用于上传文件的回调
     *
     * @param callback 进度回调接口
     * @return 包装后的OkHttpClient
     */
    public static OkHttpClient addProgressRequestCallback(final ProgressRequestCallback callback) {

        OkHttpClient.Builder client = new OkHttpClient.Builder();

        //增加拦截器
        client.addInterceptor(new Interceptor() {
            @Override
            public Response intercept(Chain chain) throws IOException {
                Request original = chain.request();

                Request request = original.newBuilder()
                        .method(original.method(), new ProgressRequestBody(original.body(), callback))
                        .build();
                return chain.proceed(request);
            }
        });
        return client.build();
    }
}
